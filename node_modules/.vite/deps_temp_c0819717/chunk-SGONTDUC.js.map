{
  "version": 3,
  "sources": ["../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/createErrorWithCleanStackTrace.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/getGlobalObject.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/projectInfo.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/assert.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/isBrowser.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/isObject.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/objectAssign.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/lowercaseFirstLetter.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/isCallable.js", "../../../.yarn/unplugged/telefunc-virtual-ccd523698d/node_modules/telefunc/dist/esm/utils/hasProp.js"],
  "sourcesContent": ["export { createErrorWithCleanStackTrace };\nfunction createErrorWithCleanStackTrace(errorMessage, numberOfStackTraceLinesToRemove) {\n    let err;\n    {\n        var stackTraceLimit__original = Error.stackTraceLimit;\n        Error.stackTraceLimit = Infinity;\n        err = new Error(errorMessage);\n        Error.stackTraceLimit = stackTraceLimit__original;\n    }\n    err.stack = clean(err.stack, numberOfStackTraceLinesToRemove);\n    return err;\n}\nfunction clean(errStack, numberOfStackTraceLinesToRemove) {\n    if (!errStack) {\n        return errStack;\n    }\n    const stackLines = splitByLine(errStack);\n    let linesRemoved = 0;\n    const stackLine__cleaned = stackLines\n        .filter((line) => {\n        // Remove internal stack traces\n        if (line.includes(' (internal/') || line.includes(' (node:internal')) {\n            return false;\n        }\n        if (linesRemoved < numberOfStackTraceLinesToRemove && isStackTraceLine(line)) {\n            linesRemoved++;\n            return false;\n        }\n        return true;\n    })\n        .join('\\n');\n    return stackLine__cleaned;\n}\nfunction isStackTraceLine(line) {\n    return line.startsWith('    at ');\n}\nfunction splitByLine(str) {\n    // https://stackoverflow.com/questions/21895233/how-in-node-to-split-string-by-newline-n\n    return str.split(/\\r?\\n/);\n}\n", "export function getGlobalObject(\n/** We use the filename or file path as module key */\nmoduleKey, defaultValue) {\n    const allGlobalObjects = (globalThis.__telefunc = globalThis.__telefunc || {});\n    const globalObject = (allGlobalObjects[moduleKey] = allGlobalObjects[moduleKey] || defaultValue);\n    return globalObject;\n}\n", "const PROJECT_VERSION = '0.1.64';\nexport const projectInfo = {\n    projectName: 'Telefunc',\n    projectVersion: PROJECT_VERSION,\n    npmPackageName: 'telefunc',\n    githubRepository: 'https://github.com/brillout/telefunc',\n    discordInviteToolChannel: 'https://discord.com/invite/3DYWwk4xRQ'\n};\n", "export { assert };\nexport { assertUsage };\nexport { assertWarning };\nexport { assertInfo };\nexport { getProjectError };\nexport { errorPrefix };\nimport { createErrorWithCleanStackTrace } from './createErrorWithCleanStackTrace';\nimport { getGlobalObject } from './getGlobalObject';\nimport { projectInfo } from './projectInfo';\nconst errorPrefix = `[${projectInfo.npmPackageName}@${projectInfo.projectVersion}]`;\nconst internalErrorPrefix = `${errorPrefix}[Bug]`;\nconst usageErrorPrefix = `${errorPrefix}[Wrong Usage]`;\nconst warningPrefix = `${errorPrefix}[Warning]`;\nconst infoPrefix = `${errorPrefix}[Info]`;\nconst numberOfStackTraceLinesToRemove = 2;\nfunction assert(condition, debugInfo) {\n    if (condition) {\n        return;\n    }\n    const debugStr = (() => {\n        if (!debugInfo) {\n            return '';\n        }\n        const debugInfoSerialized = typeof debugInfo === 'string' ? debugInfo : '`' + JSON.stringify(debugInfo) + '`';\n        return `Debug info (this is for the ${projectInfo.projectName} maintainers; you can ignore this): ${debugInfoSerialized}.`;\n    })();\n    const internalError = createErrorWithCleanStackTrace([\n        `${internalErrorPrefix} You stumbled upon a bug in ${projectInfo.projectName}'s source code.`,\n        `Reach out at ${projectInfo.githubRepository}/issues/new or ${projectInfo.discordInviteToolChannel} and include this error stack (the error stack is usually enough to fix the problem).`,\n        'A maintainer will fix the bug (usually under 24 hours).',\n        `Don't hesitate to reach out as it makes ${projectInfo.projectName} more robust.`,\n        debugStr\n    ].join(' '), numberOfStackTraceLinesToRemove);\n    throw internalError;\n}\nfunction assertUsage(condition, errorMessage) {\n    if (condition) {\n        return;\n    }\n    const whiteSpace = errorMessage.startsWith('[') ? '' : ' ';\n    const usageError = createErrorWithCleanStackTrace(`${usageErrorPrefix}${whiteSpace}${errorMessage}`, numberOfStackTraceLinesToRemove);\n    throw usageError;\n}\nfunction getProjectError(errorMessage) {\n    const sep = errorMessage.startsWith('[') ? '' : ' ';\n    const pluginError = createErrorWithCleanStackTrace(`${errorPrefix}${sep}${errorMessage}`, numberOfStackTraceLinesToRemove);\n    return pluginError;\n}\nconst globalObject = getGlobalObject('assert.ts', { alreadyLogged: new Set() });\nfunction assertWarning(condition, errorMessage, { onlyOnce, showStackTrace }) {\n    if (condition) {\n        return;\n    }\n    const msg = `${warningPrefix} ${errorMessage}`;\n    if (onlyOnce) {\n        const { alreadyLogged } = globalObject;\n        const key = onlyOnce === true ? msg : onlyOnce;\n        if (alreadyLogged.has(key)) {\n            return;\n        }\n        else {\n            alreadyLogged.add(key);\n        }\n    }\n    if (showStackTrace) {\n        console.warn(new Error(msg));\n    }\n    else {\n        console.warn(msg);\n    }\n}\nfunction assertInfo(condition, errorMessage, { onlyOnce }) {\n    if (condition) {\n        return;\n    }\n    const msg = `${infoPrefix} ${errorMessage}`;\n    if (onlyOnce) {\n        const { alreadyLogged } = globalObject;\n        const key = msg;\n        if (alreadyLogged.has(key)) {\n            return;\n        }\n        else {\n            alreadyLogged.add(key);\n        }\n    }\n    console.log(msg);\n}\n", "export { isBrowser };\nimport { assert } from './assert';\nfunction isBrowser() {\n    const itIs = __browserTest();\n    assert(itIs === !__nodeTest());\n    return itIs;\n}\nfunction __nodeTest() {\n    const nodeVersion = typeof process !== 'undefined' && process && process.versions && process.versions.node;\n    return !!nodeVersion;\n}\nfunction __browserTest() {\n    return typeof window !== 'undefined';\n}\n", "export { isObject };\nfunction isObject(value) {\n    return typeof value === 'object' && value !== null;\n}\n", "export { objectAssign };\n// Same as `Object.assign()` but with type inference\nfunction objectAssign(obj, objAddendum) {\n    Object.assign(obj, objAddendum);\n}\n", "export { lowercaseFirstLetter };\nfunction lowercaseFirstLetter(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n}\n", "export { isCallable };\nfunction isCallable(thing) {\n    return thing instanceof Function || typeof thing === 'function';\n}\n", "export { hasProp };\nimport { isCallable } from './isCallable';\n// prettier-ignore\nfunction hasProp(obj, prop, type = 'unknown') {\n    const propExists = typeof obj === 'object' && obj !== null && prop in obj;\n    if (!propExists) {\n        return false;\n    }\n    if (type === 'unknown') {\n        return true;\n    }\n    const propValue = obj[prop];\n    if (type === 'array') {\n        return Array.isArray(propValue);\n    }\n    if (type === 'string[]') {\n        return Array.isArray(propValue) && propValue.every(el => typeof el === 'string');\n    }\n    if (type === 'function') {\n        return isCallable(propValue);\n    }\n    if (Array.isArray(type)) {\n        return typeof propValue === 'string' && type.includes(propValue);\n    }\n    if (type === 'null') {\n        return propValue === null;\n    }\n    if (type === 'true') {\n        return propValue === true;\n    }\n    return typeof propValue === type;\n}\n/* Couldn't make it work\nfunction propsIsNotNullish<ObjectType extends Record<PropName, PropType | null | undefined>, PropName extends PropertyKey, PropType>(obj: ObjectType, prop: PropName): obj is ObjectType & Record<PropName, PropType> {\n  return obj[prop] !== null && obj[prop] !== undefined\n}\n*/\n// Resources:\n//  - https://2ality.com/2020/06/type-guards-assertion-functions-typescript.html\n//  - https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABDAzgFQJ4AcCmdgAUAbgIYA2IOAXIiWBgDSJTbWIDkARnHGTnewCUNUhRzIUibr35gA3AFgAUKEiwEEzLnzFylGnUbNWNdmBABbTjgBOQkXvGpE5q7cUrw0eElRa8hKL6tPRMLLimKFA2MGAA5vaIQU6SUTHxHqreGn6sOskGocYRHOAA1mBwAO5gickSiOWVNZle6r7oeYGOhUbhbGmxcYgAvKVgFdW1wlI8fHSIAN7KiMiExeIjW+OTNeyIgksrq4g2OFAgNkjRlMcAvsdnF1cb+EmOo9v9Hg9KyhAIKK0GhNKajRAAFgATMplCQUChbFACLltIQSEwzJZrHZBIJ-oCZAA6MhwOIEEj4v6eNQ+WgIpEEAFgAAmMHaIImzTAM3hiJsUEkzLZ7SOShOa0QTIQIp8hyelzAx1WUAAFjZqi4cFVEABRGwamwEdgAQQZArpADESDAyEJlHcgA\n"],
  "mappings": "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",
  "names": ["numberOfStackTraceLinesToRemove", "globalObject"]
}
